name: widget-server pipe

on:
  push:
    branches:
      - main

env:
  ECS_SERVICE: widget-server-task-service-3qmnpi21
  CONTAINER_NAME: widget-server
  ECS_CLUSTER: tiagolopes-widget-app
  ECS_TASK_DEFINITION: .aws/task-definition.json
  FRONTEND_DIST_FOLDER: ../../web/dist
  S3_BUCKET_NAME: widget-app-web-tiagolopes

jobs:
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Configure node
        id: configure-node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        id: install-pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        id: install-dependencies
        run: |
          cd web
          pnpm install
      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Sync files to AWS
        id: sync-files-to-aws
        run: |
          aws s3 sync ${{ env.FRONTEND_DIST_FOLDER }} s3://${{ env.S3_BUCKET_NAME }} --delete

      - name: Invalidate CDN cache
        id: invalidate-cdn-cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Configure node
        id: configure-node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        id: install-pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        id: install-dependencies
        run: |
          cd server
          pnpm install

      # - name: Configure AWS Credentials
      #   id: configure-aws-credentials
      #   uses: aws-actions/configure-aws-credentials@v4.1.0
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ vars.AWS_REGION }}

      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Set up Docker Buildx
      #   id: setup-docker-buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Generate tag
      #   id: generate-tag
      #   run: |
      #     SHA=$(echo $GITHUB_SHA | head -c 7)
      #     echo "SHA=$SHA" >> $GITHUB_OUTPUT

      # - name: Build the image
      #   id: build-image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./server
      #     load: true
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     tags: |
      #       ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.29.0
      #   with:
      #     image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test'
      #     format: 'table'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      # - name: Build and push the image to AWS ECR
      #   id: build-push-image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./server
      #     push: true
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     tags: |
      #       ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}
      # - name: Render task definition
      #   id: render-task-definition
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}

      # - name: Deploy to ECS
      #   id: deploy-ecs
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   with:
      #     task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true

      # - name: Deploy to App Runner
      #   id: deploy-app-runner
      #   uses: awslabs/amazon-app-runner-deploy@main
      #   with:
      #     service: ${{ vars.APP_RUNNER_SERVICE }}
      #     image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}
      #     region: ${{ vars.AWS_REGION }}
      #     access-role-arn: ${{ secrets.AWS_APP_RUNNER_ACCESS_ROLE_ARN }}
      #     cpu: 1
      #     memory: 2
      #     port: 3333
      #     wait-for-service-stability-seconds: 180

      # - name: App Runner Check
      #   id: app-runner-check
      #   run: |
      #     echo "App running... ${{ steps.deploy-app-runner.outputs.service-url }}"